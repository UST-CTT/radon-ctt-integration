os: linux
dist: bionic
language: shell

services:
  - docker

env:
  global:
    - GMT_DOCKER_COMPOSE_URL="https://github.com/radon-h2020/radon-gmt/blob/project/radon/docker-compose.yml"
    - GMT_HTTP_PORT="18080"
    - PARTICLES_URL="https://github.com/radon-h2020/radon-particles.git"
    - PARTICLES_BRANCH="master"
    - PARTICLES_DIR="/tmp/radon-particles"
    - CTT_SERVER_DOCKER="ustctt/ctt"
    - CTT_VOLUME="/tmp/RadonCTT"
    - CTT_PORT="18080"
    - CTT_EXT_PORT="7999"
    - CTT_ENDPOINT="http://localhost:${CTT_EXT_PORT}/RadonCTT"
    - SOCKSHOP_DEMO_URL="https://github.com/radon-h2020/demo-ctt-sockshop.git"
    - SOCKSHOP_DEMO_BRANCH="master"
    - SOCKSHOP_DEMO_DIR="/tmp/demo-ctt-sockshop"
    - SUT_CSAR_FN="sut.csar"
    - SUT_CSAR="/tmp/${SUT_CSAR_FN}"
    - TI_CSAR_FN="ti.csar"
    - TI_CSAR="/tmp/${TI_CSAR_FN}"
    
jobs:
  include:
    - env:
      - NAME="CTT-dev"
      - CTT_SERVER_DOCKER_TAG="dev"
      - SUT_EXPORT_URL="http://127.0.0.1:${GMT_HTTP_PORT}/winery/servicetemplates/radon.blueprints/SockShopTestingExample/?yaml&csar"
      - SUT_DEPLOYMENT_PORT="80"
      - SUT_DEPLOYMENT_URL="http://localhost:${SUT_DEPLOYMENT_PORT}"
      - TI_EXPORT_URL="http://127.0.0.1:${GMT_HTTP_PORT}/winery/servicetemplates/radon.blueprints.testing/JMeterMasterOnly/?yaml&csar"
      - TI_DEPLOYMENT_PORT="5000"
      - TI_DEPLOYMENT_URL="http://localhost:${TI_DEPLOYMENT_PORT}"
    - env:
      - NAME="CTT-master"
      - CTT_SERVER_DOCKER_TAG="latest"
      - SUT_EXPORT_URL="http://127.0.0.1:${GMT_HTTP_PORT}/winery/servicetemplates/radon.blueprints/SockShopTestingExample/?yaml&csar"
      - SUT_DEPLOYMENT_PORT="80"
      - SUT_DEPLOYMENT_URL="http://localhost:${SUT_DEPLOYMENT_PORT}"
      - TI_EXPORT_URL="http://127.0.0.1:${GMT_HTTP_PORT}/winery/servicetemplates/radon.blueprints.testing/JMeterMasterOnly/?yaml&csar"
      - TI_DEPLOYMENT_PORT="5000"
      - TI_DEPLOYMENT_URL="http://localhost:${TI_DEPLOYMENT_PORT}"

install:
  - sudo apt-get -y install docker-compose python3 python3-setuptools python3-wheel python3-pip python3-docker python3-apt jq ansible
  - python3 -m pip install -r requirements.txt

script:
  - set -e
  # Pull Winery
  - docker-compose pull
  # Clone Particles
  - git clone --single-branch --branch "${PARTICLES_BRANCH}" "${PARTICLES_URL}" "${PARTICLES_DIR}"
  - chmod -R a+rwx "${PARTICLES_DIR}"
  # Start Winery
  - docker-compose up -d
  # Start CTT server
  - mkdir ${CTT_VOLUME}
  - docker run --name cttserver -d -p "127.0.0.1:${CTT_EXT_PORT}:${CTT_PORT}" -v /var/run/docker.sock:/var/run/docker.sock -v "${CTT_VOLUME}:/tmp/RadonCTT" "${CTT_SERVER_DOCKER}:${CTT_SERVER_DOCKER_TAG}"
  # Clone SockShop
  - git clone --single-branch --branch "${SOCKSHOP_DEMO_BRANCH}" "${SOCKSHOP_DEMO_URL}" "${SOCKSHOP_DEMO_DIR}"
  # Obtain SUT CSAR
  - "curl -H 'Accept: application/xml' -o \"${SUT_CSAR}\" \"${SUT_EXPORT_URL}\""
  - "echo \"${SUT_CSAR} available at: `curl -F \"file=@${SUT_CSAR}\" \"https://file.io/?expires=1w\" | jq -e '.link'`\""
  # Obtain TI CSAR
  - "curl -H 'Accept: application/xml' -o \"${TI_CSAR}\" \"${TI_EXPORT_URL}\""
  - "echo \"${TI_CSAR} available at: `curl -F \"file=@${TI_CSAR}\" \"https://file.io/?expires=1w\" | jq -e '.link'`\""
  # Shutdown Winery
  - docker-compose rm -fsv
  # CTT: Create Project
  - "export CTT_PROJECT_UUID=$(./curl_uuid.sh \"${CTT_ENDPOINT}/project\" \"{\\\"name\\\":\\\"SockShop\\\",\\\"repository_url\\\":\\\"${SOCKSHOP_DEMO_URL}\\\"}\")"
  # Copy CSARs into project
  - sudo cp "${SUT_CSAR}" "${TI_CSAR}" "${CTT_VOLUME}/project/${CTT_PROJECT_UUID}/radon-ctt/."
  # CTT: Create Test-Artifact
  - "export CTT_TESTARTIFACT_UUID=$(./curl_uuid.sh \"${CTT_ENDPOINT}/testartifact\" \"{\\\"project_uuid\\\":\\\"${CTT_PROJECT_UUID}\\\",\\\"sut_tosca_path\\\":\\\"radon-ctt/${SUT_CSAR_FN}\\\",\\\"ti_tosca_path\\\":\\\"radon-ctt/${TI_CSAR_FN}\\\"}\")"
  # CTT: Create Deployment
  - "export CTT_DEPLOYMENT_UUID=$(./curl_uuid.sh  \"${CTT_ENDPOINT}/deployment\" \"{\\\"testartifact_uuid\\\":\\\"${CTT_TESTARTIFACT_UUID}\\\"}\")"
  # Give deployments some time to succeed.
  - sleep 60
  # Check SUT Deployment
  - "export SUT_DEPLOYMENT_HTTP=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \"${SUT_DEPLOYMENT_URL}\")"
  - "export TI_DEPLOYMENT_HTTP=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \"${TI_DEPLOYMENT_URL}\")"
  - "echo HTTP Codes: SUT ${SUT_DEPLOYMENT_HTTP}, TI ${TI_DEPLOYMENT_HTTP}"
  - set +e

after_script:
  - docker logs cttserver | tee ctt_docker.log
  - "echo \"CTT logs available at: `curl -F \"file=@ctt_docker.log\" \"https://file.io/?expires=1w\" | jq -e '.link'`\""

